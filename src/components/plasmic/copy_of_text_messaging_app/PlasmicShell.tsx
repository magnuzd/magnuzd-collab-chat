// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 72tUXrciMYQcBHG6D1vyXy
// Component: FfB2otMCSMs8U
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Card from "../../Card"; // plasmic-import: 4ryXn--4f1MZD/component
import TextInput from "../../TextInput"; // plasmic-import: QtgH6B6JlnAfz/component
import Button from "../../Button"; // plasmic-import: 5DE4ToOecQeHY/component
import ListItem from "../../ListItem"; // plasmic-import: HUBrdDYNv1H-8/component
import NavLevel1 from "../../NavLevel1"; // plasmic-import: hTinKt-4uikWq/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_dls_css from "../dls/plasmic_dls.module.css"; // plasmic-import: wKYGFqyVBmDVb7fPCj2tLF/projectcss
import projectcss from "./plasmic_copy_of_text_messaging_app.module.css"; // plasmic-import: 72tUXrciMYQcBHG6D1vyXy/projectcss
import sty from "./PlasmicShell.module.css"; // plasmic-import: FfB2otMCSMs8U/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: T2ZHvLJ9kHHH8y/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: stDZdaEWpQOmVV/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _YyChvp-V52F2m/icon

export type PlasmicShell__VariantMembers = {
  newMessage: "newMessage";
};

export type PlasmicShell__VariantsArgs = {
  newMessage?: MultiChoiceArg<"newMessage">;
};

type VariantPropType = keyof PlasmicShell__VariantsArgs;
export const PlasmicShell__VariantProps = new Array<VariantPropType>(
  "newMessage"
);

export type PlasmicShell__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicShell__ArgsType;
export const PlasmicShell__ArgProps = new Array<ArgPropType>("children");

export type PlasmicShell__OverridesType = {
  root?: p.Flex<"section">;
  column?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultShellProps {
  children?: React.ReactNode;
  newMessage?: MultiChoiceArg<"newMessage">;
  className?: string;
}

function PlasmicShell__RenderFunc(props: {
  variants: PlasmicShell__VariantsArgs;
  args: PlasmicShell__ArgsType;
  overrides: PlasmicShell__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        plasmic_dls_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"column"}
        data-plasmic-override={overrides.column}
        className={classNames(projectcss.all, sty.column)}
      >
        {true ? (
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <Card
                    className={classNames("__wab_instance", sty.card__gQsm)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox__hy7V)}
                  >
                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__sReGu
                      )}
                    />
                  </div>

                  <Button
                    className={classNames("__wab_instance", sty.button___9ToU)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox___2ErQb)}
                  >
                    <ListItem
                      className={classNames(
                        "__wab_instance",
                        sty.listItem__aowYt
                      )}
                    />
                  </div>

                  <NavLevel1
                    className={classNames(
                      "__wab_instance",
                      sty.navLevel1__eI4Q
                    )}
                  />
                </React.Fragment>
              ),
              value: args.children
            })}
          </div>
        ) : null}
      </div>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "column", "freeBox"],
  column: ["column", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  column: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShell__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShell__VariantsArgs;
    args?: PlasmicShell__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicShell__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShell__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicShell__ArgProps,
      internalVariantPropNames: PlasmicShell__VariantProps
    });

    return PlasmicShell__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShell";
  } else {
    func.displayName = `PlasmicShell.${nodeName}`;
  }
  return func;
}

export const PlasmicShell = Object.assign(
  // Top-level PlasmicShell renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    column: makeNodeComponent("column"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicShell
    internalVariantProps: PlasmicShell__VariantProps,
    internalArgProps: PlasmicShell__ArgProps
  }
);

export default PlasmicShell;
/* prettier-ignore-end */
