// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 72tUXrciMYQcBHG6D1vyXy
// Component: NRKMtE_uacpDN
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Shell from "../../Shell"; // plasmic-import: FfB2otMCSMs8U/component
import Card from "../../Card"; // plasmic-import: 4ryXn--4f1MZD/component
import NavLevel1 from "../../NavLevel1"; // plasmic-import: hTinKt-4uikWq/component
import TextInput from "../../TextInput"; // plasmic-import: QtgH6B6JlnAfz/component
import Button from "../../Button"; // plasmic-import: 5DE4ToOecQeHY/component
import ListItem from "../../ListItem"; // plasmic-import: HUBrdDYNv1H-8/component

import { useScreenVariants as useScreenVariantswuZmlEqDaC } from "../dls/PlasmicGlobalVariant__Screen"; // plasmic-import: wuZmlEQDa-c/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_dls_css from "../dls/plasmic_dls.module.css"; // plasmic-import: wKYGFqyVBmDVb7fPCj2tLF/projectcss
import projectcss from "./plasmic_copy_of_text_messaging_app.module.css"; // plasmic-import: 72tUXrciMYQcBHG6D1vyXy/projectcss
import sty from "./PlasmicDefault.module.css"; // plasmic-import: NRKMtE_uacpDN/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: T2ZHvLJ9kHHH8y/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: stDZdaEWpQOmVV/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _YyChvp-V52F2m/icon

export type PlasmicDefault__VariantMembers = {};

export type PlasmicDefault__VariantsArgs = {};
type VariantPropType = keyof PlasmicDefault__VariantsArgs;
export const PlasmicDefault__VariantProps = new Array<VariantPropType>();

export type PlasmicDefault__ArgsType = {};
type ArgPropType = keyof PlasmicDefault__ArgsType;
export const PlasmicDefault__ArgProps = new Array<ArgPropType>();

export type PlasmicDefault__OverridesType = {
  root?: p.Flex<"section">;
  floatingPanel?: p.Flex<typeof Shell>;
};

export interface DefaultDefaultProps {
  className?: string;
}

function PlasmicDefault__RenderFunc(props: {
  variants: PlasmicDefault__VariantsArgs;
  args: PlasmicDefault__ArgsType;
  overrides: PlasmicDefault__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswuZmlEqDaC()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <p.Stack
            as={"section"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              plasmic_dls_css.plasmic_tokens,
              sty.root
            )}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <Shell
                data-plasmic-name={"floatingPanel"}
                data-plasmic-override={overrides.floatingPanel}
                className={classNames("__wab_instance", sty.floatingPanel)}
              >
                <Card
                  className={classNames("__wab_instance", sty.card__z6GHz)}
                />

                <NavLevel1
                  className={classNames("__wab_instance", sty.navLevel1__lSkg5)}
                >
                  {"New message"}
                </NavLevel1>
              </Shell>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <Shell
                className={classNames("__wab_instance", sty.shell___335WH)}
              >
                <Card
                  className={classNames("__wab_instance", sty.card__lDe0V)}
                />
              </Shell>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <Shell
                className={classNames("__wab_instance", sty.shell__i598C)}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <NavLevel1
                className={classNames("__wab_instance", sty.navLevel1__h8Eil)}
              />
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "floatingPanel"],
  floatingPanel: ["floatingPanel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  floatingPanel: typeof Shell;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDefault__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDefault__VariantsArgs;
    args?: PlasmicDefault__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDefault__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDefault__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDefault__ArgProps,
      internalVariantPropNames: PlasmicDefault__VariantProps
    });

    return PlasmicDefault__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDefault";
  } else {
    func.displayName = `PlasmicDefault.${nodeName}`;
  }
  return func;
}

export const PlasmicDefault = Object.assign(
  // Top-level PlasmicDefault renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    floatingPanel: makeNodeComponent("floatingPanel"),

    // Metadata about props expected for PlasmicDefault
    internalVariantProps: PlasmicDefault__VariantProps,
    internalArgProps: PlasmicDefault__ArgProps
  }
);

export default PlasmicDefault;
/* prettier-ignore-end */
